// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quadtreeset.protodevel

#ifndef PROTOBUF_quadtreeset_2eprotodevel__INCLUDED
#define PROTOBUF_quadtreeset_2eprotodevel__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace keyhole {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_quadtreeset_2eprotodevel();
void protobuf_AssignDesc_quadtreeset_2eprotodevel();
void protobuf_ShutdownFile_quadtreeset_2eprotodevel();

class QuadtreeChannel;
class QuadtreeImageryTimedTile;
class QuadtreeImageryDatedTile;
class QuadtreeImageryDates;
class QuadtreeLayer;
class QuadtreeNode;
class QuadtreePacket;
class QuadtreePacket_SparseQuadtreeNode;

enum QuadtreeLayer_LayerType {
  QuadtreeLayer_LayerType_LAYER_TYPE_IMAGERY = 0,
  QuadtreeLayer_LayerType_LAYER_TYPE_TERRAIN = 1,
  QuadtreeLayer_LayerType_LAYER_TYPE_VECTOR = 2,
  QuadtreeLayer_LayerType_LAYER_TYPE_IMAGERY_HISTORY = 3
};
bool QuadtreeLayer_LayerType_IsValid(int value);
const QuadtreeLayer_LayerType QuadtreeLayer_LayerType_LayerType_MIN = QuadtreeLayer_LayerType_LAYER_TYPE_IMAGERY;
const QuadtreeLayer_LayerType QuadtreeLayer_LayerType_LayerType_MAX = QuadtreeLayer_LayerType_LAYER_TYPE_IMAGERY_HISTORY;
const int QuadtreeLayer_LayerType_LayerType_ARRAYSIZE = QuadtreeLayer_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuadtreeLayer_LayerType_descriptor();
inline const ::std::string& QuadtreeLayer_LayerType_Name(QuadtreeLayer_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuadtreeLayer_LayerType_descriptor(), value);
}
inline bool QuadtreeLayer_LayerType_Parse(
    const ::std::string& name, QuadtreeLayer_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuadtreeLayer_LayerType>(
    QuadtreeLayer_LayerType_descriptor(), name, value);
}
enum QuadtreeNode_NodeFlags {
  QuadtreeNode_NodeFlags_NODE_FLAGS_CHILD_COUNT = 4,
  QuadtreeNode_NodeFlags_NODE_FLAGS_CACHE_BIT = 4,
  QuadtreeNode_NodeFlags_NODE_FLAGS_DRAWABLE_BIT = 5,
  QuadtreeNode_NodeFlags_NODE_FLAGS_IMAGE_BIT = 6,
  QuadtreeNode_NodeFlags_NODE_FLAGS_TERRAIN_BIT = 7
};
bool QuadtreeNode_NodeFlags_IsValid(int value);
const QuadtreeNode_NodeFlags QuadtreeNode_NodeFlags_NodeFlags_MIN = QuadtreeNode_NodeFlags_NODE_FLAGS_CHILD_COUNT;
const QuadtreeNode_NodeFlags QuadtreeNode_NodeFlags_NodeFlags_MAX = QuadtreeNode_NodeFlags_NODE_FLAGS_TERRAIN_BIT;
const int QuadtreeNode_NodeFlags_NodeFlags_ARRAYSIZE = QuadtreeNode_NodeFlags_NodeFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuadtreeNode_NodeFlags_descriptor();
inline const ::std::string& QuadtreeNode_NodeFlags_Name(QuadtreeNode_NodeFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuadtreeNode_NodeFlags_descriptor(), value);
}
inline bool QuadtreeNode_NodeFlags_Parse(
    const ::std::string& name, QuadtreeNode_NodeFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuadtreeNode_NodeFlags>(
    QuadtreeNode_NodeFlags_descriptor(), name, value);
}
// ===================================================================

class QuadtreeChannel : public ::google::protobuf::Message {
 public:
  QuadtreeChannel();
  virtual ~QuadtreeChannel();
  
  QuadtreeChannel(const QuadtreeChannel& from);
  
  inline QuadtreeChannel& operator=(const QuadtreeChannel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreeChannel& default_instance();
  
  void Swap(QuadtreeChannel* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreeChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreeChannel& from);
  void MergeFrom(const QuadtreeChannel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 channel_epoch = 2;
  inline bool has_channel_epoch() const;
  inline void clear_channel_epoch();
  static const int kChannelEpochFieldNumber = 2;
  inline ::google::protobuf::int32 channel_epoch() const;
  inline void set_channel_epoch(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreeChannel)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_channel_epoch();
  inline void clear_has_channel_epoch();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 channel_epoch_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreeChannel* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreeImageryTimedTile : public ::google::protobuf::Message {
 public:
  QuadtreeImageryTimedTile();
  virtual ~QuadtreeImageryTimedTile();
  
  QuadtreeImageryTimedTile(const QuadtreeImageryTimedTile& from);
  
  inline QuadtreeImageryTimedTile& operator=(const QuadtreeImageryTimedTile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreeImageryTimedTile& default_instance();
  
  void Swap(QuadtreeImageryTimedTile* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreeImageryTimedTile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreeImageryTimedTile& from);
  void MergeFrom(const QuadtreeImageryTimedTile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 milliseconds = 1;
  inline bool has_milliseconds() const;
  inline void clear_milliseconds();
  static const int kMillisecondsFieldNumber = 1;
  inline ::google::protobuf::int32 milliseconds() const;
  inline void set_milliseconds(::google::protobuf::int32 value);
  
  // required int32 timed_tile_epoch = 2;
  inline bool has_timed_tile_epoch() const;
  inline void clear_timed_tile_epoch();
  static const int kTimedTileEpochFieldNumber = 2;
  inline ::google::protobuf::int32 timed_tile_epoch() const;
  inline void set_timed_tile_epoch(::google::protobuf::int32 value);
  
  // optional int32 provider = 3;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline ::google::protobuf::int32 provider() const;
  inline void set_provider(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreeImageryTimedTile)
 private:
  inline void set_has_milliseconds();
  inline void clear_has_milliseconds();
  inline void set_has_timed_tile_epoch();
  inline void clear_has_timed_tile_epoch();
  inline void set_has_provider();
  inline void clear_has_provider();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 milliseconds_;
  ::google::protobuf::int32 timed_tile_epoch_;
  ::google::protobuf::int32 provider_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreeImageryTimedTile* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreeImageryDatedTile : public ::google::protobuf::Message {
 public:
  QuadtreeImageryDatedTile();
  virtual ~QuadtreeImageryDatedTile();
  
  QuadtreeImageryDatedTile(const QuadtreeImageryDatedTile& from);
  
  inline QuadtreeImageryDatedTile& operator=(const QuadtreeImageryDatedTile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreeImageryDatedTile& default_instance();
  
  void Swap(QuadtreeImageryDatedTile* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreeImageryDatedTile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreeImageryDatedTile& from);
  void MergeFrom(const QuadtreeImageryDatedTile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 dated_tile_epoch = 2;
  inline bool has_dated_tile_epoch() const;
  inline void clear_dated_tile_epoch();
  static const int kDatedTileEpochFieldNumber = 2;
  inline ::google::protobuf::int32 dated_tile_epoch() const;
  inline void set_dated_tile_epoch(::google::protobuf::int32 value);
  
  // required int32 provider = 3;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline ::google::protobuf::int32 provider() const;
  inline void set_provider(::google::protobuf::int32 value);
  
  // repeated .keyhole.QuadtreeImageryTimedTile timed_tiles = 4;
  inline int timed_tiles_size() const;
  inline void clear_timed_tiles();
  static const int kTimedTilesFieldNumber = 4;
  inline const ::keyhole::QuadtreeImageryTimedTile& timed_tiles(int index) const;
  inline ::keyhole::QuadtreeImageryTimedTile* mutable_timed_tiles(int index);
  inline ::keyhole::QuadtreeImageryTimedTile* add_timed_tiles();
  inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryTimedTile >&
      timed_tiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryTimedTile >*
      mutable_timed_tiles();
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreeImageryDatedTile)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_dated_tile_epoch();
  inline void clear_has_dated_tile_epoch();
  inline void set_has_provider();
  inline void clear_has_provider();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 dated_tile_epoch_;
  ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryTimedTile > timed_tiles_;
  ::google::protobuf::int32 provider_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreeImageryDatedTile* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreeImageryDates : public ::google::protobuf::Message {
 public:
  QuadtreeImageryDates();
  virtual ~QuadtreeImageryDates();
  
  QuadtreeImageryDates(const QuadtreeImageryDates& from);
  
  inline QuadtreeImageryDates& operator=(const QuadtreeImageryDates& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreeImageryDates& default_instance();
  
  void Swap(QuadtreeImageryDates* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreeImageryDates* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreeImageryDates& from);
  void MergeFrom(const QuadtreeImageryDates& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .keyhole.QuadtreeImageryDatedTile dated_tile = 1;
  inline int dated_tile_size() const;
  inline void clear_dated_tile();
  static const int kDatedTileFieldNumber = 1;
  inline const ::keyhole::QuadtreeImageryDatedTile& dated_tile(int index) const;
  inline ::keyhole::QuadtreeImageryDatedTile* mutable_dated_tile(int index);
  inline ::keyhole::QuadtreeImageryDatedTile* add_dated_tile();
  inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryDatedTile >&
      dated_tile() const;
  inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryDatedTile >*
      mutable_dated_tile();
  
  // optional int32 shared_tile_date = 2;
  inline bool has_shared_tile_date() const;
  inline void clear_shared_tile_date();
  static const int kSharedTileDateFieldNumber = 2;
  inline ::google::protobuf::int32 shared_tile_date() const;
  inline void set_shared_tile_date(::google::protobuf::int32 value);
  
  // repeated int32 coarse_tile_dates = 3;
  inline int coarse_tile_dates_size() const;
  inline void clear_coarse_tile_dates();
  static const int kCoarseTileDatesFieldNumber = 3;
  inline ::google::protobuf::int32 coarse_tile_dates(int index) const;
  inline void set_coarse_tile_dates(int index, ::google::protobuf::int32 value);
  inline void add_coarse_tile_dates(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      coarse_tile_dates() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_coarse_tile_dates();
  
  // optional int32 shared_tile_milliseconds = 4;
  inline bool has_shared_tile_milliseconds() const;
  inline void clear_shared_tile_milliseconds();
  static const int kSharedTileMillisecondsFieldNumber = 4;
  inline ::google::protobuf::int32 shared_tile_milliseconds() const;
  inline void set_shared_tile_milliseconds(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreeImageryDates)
 private:
  inline void set_has_shared_tile_date();
  inline void clear_has_shared_tile_date();
  inline void set_has_shared_tile_milliseconds();
  inline void clear_has_shared_tile_milliseconds();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryDatedTile > dated_tile_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > coarse_tile_dates_;
  ::google::protobuf::int32 shared_tile_date_;
  ::google::protobuf::int32 shared_tile_milliseconds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreeImageryDates* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreeLayer : public ::google::protobuf::Message {
 public:
  QuadtreeLayer();
  virtual ~QuadtreeLayer();
  
  QuadtreeLayer(const QuadtreeLayer& from);
  
  inline QuadtreeLayer& operator=(const QuadtreeLayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreeLayer& default_instance();
  
  void Swap(QuadtreeLayer* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreeLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreeLayer& from);
  void MergeFrom(const QuadtreeLayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef QuadtreeLayer_LayerType LayerType;
  static const LayerType LAYER_TYPE_IMAGERY = QuadtreeLayer_LayerType_LAYER_TYPE_IMAGERY;
  static const LayerType LAYER_TYPE_TERRAIN = QuadtreeLayer_LayerType_LAYER_TYPE_TERRAIN;
  static const LayerType LAYER_TYPE_VECTOR = QuadtreeLayer_LayerType_LAYER_TYPE_VECTOR;
  static const LayerType LAYER_TYPE_IMAGERY_HISTORY = QuadtreeLayer_LayerType_LAYER_TYPE_IMAGERY_HISTORY;
  static inline bool LayerType_IsValid(int value) {
    return QuadtreeLayer_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    QuadtreeLayer_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    QuadtreeLayer_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    QuadtreeLayer_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return QuadtreeLayer_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return QuadtreeLayer_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return QuadtreeLayer_LayerType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .keyhole.QuadtreeLayer.LayerType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::keyhole::QuadtreeLayer_LayerType type() const;
  inline void set_type(::keyhole::QuadtreeLayer_LayerType value);
  
  // required int32 layer_epoch = 2;
  inline bool has_layer_epoch() const;
  inline void clear_layer_epoch();
  static const int kLayerEpochFieldNumber = 2;
  inline ::google::protobuf::int32 layer_epoch() const;
  inline void set_layer_epoch(::google::protobuf::int32 value);
  
  // optional int32 provider = 3;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 3;
  inline ::google::protobuf::int32 provider() const;
  inline void set_provider(::google::protobuf::int32 value);
  
  // optional .keyhole.QuadtreeImageryDates dates_layer = 4;
  inline bool has_dates_layer() const;
  inline void clear_dates_layer();
  static const int kDatesLayerFieldNumber = 4;
  inline const ::keyhole::QuadtreeImageryDates& dates_layer() const;
  inline ::keyhole::QuadtreeImageryDates* mutable_dates_layer();
  inline ::keyhole::QuadtreeImageryDates* release_dates_layer();
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreeLayer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_layer_epoch();
  inline void clear_has_layer_epoch();
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_dates_layer();
  inline void clear_has_dates_layer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 layer_epoch_;
  ::keyhole::QuadtreeImageryDates* dates_layer_;
  ::google::protobuf::int32 provider_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreeLayer* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreeNode : public ::google::protobuf::Message {
 public:
  QuadtreeNode();
  virtual ~QuadtreeNode();
  
  QuadtreeNode(const QuadtreeNode& from);
  
  inline QuadtreeNode& operator=(const QuadtreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreeNode& default_instance();
  
  void Swap(QuadtreeNode* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreeNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreeNode& from);
  void MergeFrom(const QuadtreeNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef QuadtreeNode_NodeFlags NodeFlags;
  static const NodeFlags NODE_FLAGS_CHILD_COUNT = QuadtreeNode_NodeFlags_NODE_FLAGS_CHILD_COUNT;
  static const NodeFlags NODE_FLAGS_CACHE_BIT = QuadtreeNode_NodeFlags_NODE_FLAGS_CACHE_BIT;
  static const NodeFlags NODE_FLAGS_DRAWABLE_BIT = QuadtreeNode_NodeFlags_NODE_FLAGS_DRAWABLE_BIT;
  static const NodeFlags NODE_FLAGS_IMAGE_BIT = QuadtreeNode_NodeFlags_NODE_FLAGS_IMAGE_BIT;
  static const NodeFlags NODE_FLAGS_TERRAIN_BIT = QuadtreeNode_NodeFlags_NODE_FLAGS_TERRAIN_BIT;
  static inline bool NodeFlags_IsValid(int value) {
    return QuadtreeNode_NodeFlags_IsValid(value);
  }
  static const NodeFlags NodeFlags_MIN =
    QuadtreeNode_NodeFlags_NodeFlags_MIN;
  static const NodeFlags NodeFlags_MAX =
    QuadtreeNode_NodeFlags_NodeFlags_MAX;
  static const int NodeFlags_ARRAYSIZE =
    QuadtreeNode_NodeFlags_NodeFlags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeFlags_descriptor() {
    return QuadtreeNode_NodeFlags_descriptor();
  }
  static inline const ::std::string& NodeFlags_Name(NodeFlags value) {
    return QuadtreeNode_NodeFlags_Name(value);
  }
  static inline bool NodeFlags_Parse(const ::std::string& name,
      NodeFlags* value) {
    return QuadtreeNode_NodeFlags_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 flags = 1;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 1;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);
  
  // optional int32 cache_node_epoch = 2;
  inline bool has_cache_node_epoch() const;
  inline void clear_cache_node_epoch();
  static const int kCacheNodeEpochFieldNumber = 2;
  inline ::google::protobuf::int32 cache_node_epoch() const;
  inline void set_cache_node_epoch(::google::protobuf::int32 value);
  
  // repeated .keyhole.QuadtreeLayer layer = 3;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 3;
  inline const ::keyhole::QuadtreeLayer& layer(int index) const;
  inline ::keyhole::QuadtreeLayer* mutable_layer(int index);
  inline ::keyhole::QuadtreeLayer* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeLayer >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeLayer >*
      mutable_layer();
  
  // repeated .keyhole.QuadtreeChannel channel = 4;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline const ::keyhole::QuadtreeChannel& channel(int index) const;
  inline ::keyhole::QuadtreeChannel* mutable_channel(int index);
  inline ::keyhole::QuadtreeChannel* add_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeChannel >&
      channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeChannel >*
      mutable_channel();
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreeNode)
 private:
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_cache_node_epoch();
  inline void clear_has_cache_node_epoch();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 cache_node_epoch_;
  ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeLayer > layer_;
  ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeChannel > channel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreeNode* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreePacket_SparseQuadtreeNode : public ::google::protobuf::Message {
 public:
  QuadtreePacket_SparseQuadtreeNode();
  virtual ~QuadtreePacket_SparseQuadtreeNode();
  
  QuadtreePacket_SparseQuadtreeNode(const QuadtreePacket_SparseQuadtreeNode& from);
  
  inline QuadtreePacket_SparseQuadtreeNode& operator=(const QuadtreePacket_SparseQuadtreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreePacket_SparseQuadtreeNode& default_instance();
  
  void Swap(QuadtreePacket_SparseQuadtreeNode* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreePacket_SparseQuadtreeNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreePacket_SparseQuadtreeNode& from);
  void MergeFrom(const QuadtreePacket_SparseQuadtreeNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // required .keyhole.QuadtreeNode Node = 4;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 4;
  inline const ::keyhole::QuadtreeNode& node() const;
  inline ::keyhole::QuadtreeNode* mutable_node();
  inline ::keyhole::QuadtreeNode* release_node();
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreePacket.SparseQuadtreeNode)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_node();
  inline void clear_has_node();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::keyhole::QuadtreeNode* node_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreePacket_SparseQuadtreeNode* default_instance_;
};
// -------------------------------------------------------------------

class QuadtreePacket : public ::google::protobuf::Message {
 public:
  QuadtreePacket();
  virtual ~QuadtreePacket();
  
  QuadtreePacket(const QuadtreePacket& from);
  
  inline QuadtreePacket& operator=(const QuadtreePacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadtreePacket& default_instance();
  
  void Swap(QuadtreePacket* other);
  
  // implements Message ----------------------------------------------
  
  QuadtreePacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuadtreePacket& from);
  void MergeFrom(const QuadtreePacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef QuadtreePacket_SparseQuadtreeNode SparseQuadtreeNode;
  
  // accessors -------------------------------------------------------
  
  // required int32 packet_epoch = 1;
  inline bool has_packet_epoch() const;
  inline void clear_packet_epoch();
  static const int kPacketEpochFieldNumber = 1;
  inline ::google::protobuf::int32 packet_epoch() const;
  inline void set_packet_epoch(::google::protobuf::int32 value);
  
  // repeated group SparseQuadtreeNode = 2 {
  inline int sparsequadtreenode_size() const;
  inline void clear_sparsequadtreenode();
  static const int kSparsequadtreenodeFieldNumber = 2;
  inline const ::keyhole::QuadtreePacket_SparseQuadtreeNode& sparsequadtreenode(int index) const;
  inline ::keyhole::QuadtreePacket_SparseQuadtreeNode* mutable_sparsequadtreenode(int index);
  inline ::keyhole::QuadtreePacket_SparseQuadtreeNode* add_sparsequadtreenode();
  inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreePacket_SparseQuadtreeNode >&
      sparsequadtreenode() const;
  inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreePacket_SparseQuadtreeNode >*
      mutable_sparsequadtreenode();
  
  // @@protoc_insertion_point(class_scope:keyhole.QuadtreePacket)
 private:
  inline void set_has_packet_epoch();
  inline void clear_has_packet_epoch();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreePacket_SparseQuadtreeNode > sparsequadtreenode_;
  ::google::protobuf::int32 packet_epoch_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_quadtreeset_2eprotodevel();
  friend void protobuf_AssignDesc_quadtreeset_2eprotodevel();
  friend void protobuf_ShutdownFile_quadtreeset_2eprotodevel();
  
  void InitAsDefaultInstance();
  static QuadtreePacket* default_instance_;
};
// ===================================================================


// ===================================================================

// QuadtreeChannel

// required int32 type = 1;
inline bool QuadtreeChannel::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreeChannel::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreeChannel::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreeChannel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 QuadtreeChannel::type() const {
  return type_;
}
inline void QuadtreeChannel::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 channel_epoch = 2;
inline bool QuadtreeChannel::has_channel_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreeChannel::set_has_channel_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreeChannel::clear_has_channel_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreeChannel::clear_channel_epoch() {
  channel_epoch_ = 0;
  clear_has_channel_epoch();
}
inline ::google::protobuf::int32 QuadtreeChannel::channel_epoch() const {
  return channel_epoch_;
}
inline void QuadtreeChannel::set_channel_epoch(::google::protobuf::int32 value) {
  set_has_channel_epoch();
  channel_epoch_ = value;
}

// -------------------------------------------------------------------

// QuadtreeImageryTimedTile

// required int32 milliseconds = 1;
inline bool QuadtreeImageryTimedTile::has_milliseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreeImageryTimedTile::set_has_milliseconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreeImageryTimedTile::clear_has_milliseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreeImageryTimedTile::clear_milliseconds() {
  milliseconds_ = 0;
  clear_has_milliseconds();
}
inline ::google::protobuf::int32 QuadtreeImageryTimedTile::milliseconds() const {
  return milliseconds_;
}
inline void QuadtreeImageryTimedTile::set_milliseconds(::google::protobuf::int32 value) {
  set_has_milliseconds();
  milliseconds_ = value;
}

// required int32 timed_tile_epoch = 2;
inline bool QuadtreeImageryTimedTile::has_timed_tile_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreeImageryTimedTile::set_has_timed_tile_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreeImageryTimedTile::clear_has_timed_tile_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreeImageryTimedTile::clear_timed_tile_epoch() {
  timed_tile_epoch_ = 0;
  clear_has_timed_tile_epoch();
}
inline ::google::protobuf::int32 QuadtreeImageryTimedTile::timed_tile_epoch() const {
  return timed_tile_epoch_;
}
inline void QuadtreeImageryTimedTile::set_timed_tile_epoch(::google::protobuf::int32 value) {
  set_has_timed_tile_epoch();
  timed_tile_epoch_ = value;
}

// optional int32 provider = 3;
inline bool QuadtreeImageryTimedTile::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuadtreeImageryTimedTile::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuadtreeImageryTimedTile::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuadtreeImageryTimedTile::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
inline ::google::protobuf::int32 QuadtreeImageryTimedTile::provider() const {
  return provider_;
}
inline void QuadtreeImageryTimedTile::set_provider(::google::protobuf::int32 value) {
  set_has_provider();
  provider_ = value;
}

// -------------------------------------------------------------------

// QuadtreeImageryDatedTile

// required int32 date = 1;
inline bool QuadtreeImageryDatedTile::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreeImageryDatedTile::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreeImageryDatedTile::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreeImageryDatedTile::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 QuadtreeImageryDatedTile::date() const {
  return date_;
}
inline void QuadtreeImageryDatedTile::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 dated_tile_epoch = 2;
inline bool QuadtreeImageryDatedTile::has_dated_tile_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreeImageryDatedTile::set_has_dated_tile_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreeImageryDatedTile::clear_has_dated_tile_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreeImageryDatedTile::clear_dated_tile_epoch() {
  dated_tile_epoch_ = 0;
  clear_has_dated_tile_epoch();
}
inline ::google::protobuf::int32 QuadtreeImageryDatedTile::dated_tile_epoch() const {
  return dated_tile_epoch_;
}
inline void QuadtreeImageryDatedTile::set_dated_tile_epoch(::google::protobuf::int32 value) {
  set_has_dated_tile_epoch();
  dated_tile_epoch_ = value;
}

// required int32 provider = 3;
inline bool QuadtreeImageryDatedTile::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuadtreeImageryDatedTile::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuadtreeImageryDatedTile::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuadtreeImageryDatedTile::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
inline ::google::protobuf::int32 QuadtreeImageryDatedTile::provider() const {
  return provider_;
}
inline void QuadtreeImageryDatedTile::set_provider(::google::protobuf::int32 value) {
  set_has_provider();
  provider_ = value;
}

// repeated .keyhole.QuadtreeImageryTimedTile timed_tiles = 4;
inline int QuadtreeImageryDatedTile::timed_tiles_size() const {
  return timed_tiles_.size();
}
inline void QuadtreeImageryDatedTile::clear_timed_tiles() {
  timed_tiles_.Clear();
}
inline const ::keyhole::QuadtreeImageryTimedTile& QuadtreeImageryDatedTile::timed_tiles(int index) const {
  return timed_tiles_.Get(index);
}
inline ::keyhole::QuadtreeImageryTimedTile* QuadtreeImageryDatedTile::mutable_timed_tiles(int index) {
  return timed_tiles_.Mutable(index);
}
inline ::keyhole::QuadtreeImageryTimedTile* QuadtreeImageryDatedTile::add_timed_tiles() {
  return timed_tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryTimedTile >&
QuadtreeImageryDatedTile::timed_tiles() const {
  return timed_tiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryTimedTile >*
QuadtreeImageryDatedTile::mutable_timed_tiles() {
  return &timed_tiles_;
}

// -------------------------------------------------------------------

// QuadtreeImageryDates

// repeated .keyhole.QuadtreeImageryDatedTile dated_tile = 1;
inline int QuadtreeImageryDates::dated_tile_size() const {
  return dated_tile_.size();
}
inline void QuadtreeImageryDates::clear_dated_tile() {
  dated_tile_.Clear();
}
inline const ::keyhole::QuadtreeImageryDatedTile& QuadtreeImageryDates::dated_tile(int index) const {
  return dated_tile_.Get(index);
}
inline ::keyhole::QuadtreeImageryDatedTile* QuadtreeImageryDates::mutable_dated_tile(int index) {
  return dated_tile_.Mutable(index);
}
inline ::keyhole::QuadtreeImageryDatedTile* QuadtreeImageryDates::add_dated_tile() {
  return dated_tile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryDatedTile >&
QuadtreeImageryDates::dated_tile() const {
  return dated_tile_;
}
inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeImageryDatedTile >*
QuadtreeImageryDates::mutable_dated_tile() {
  return &dated_tile_;
}

// optional int32 shared_tile_date = 2;
inline bool QuadtreeImageryDates::has_shared_tile_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreeImageryDates::set_has_shared_tile_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreeImageryDates::clear_has_shared_tile_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreeImageryDates::clear_shared_tile_date() {
  shared_tile_date_ = 0;
  clear_has_shared_tile_date();
}
inline ::google::protobuf::int32 QuadtreeImageryDates::shared_tile_date() const {
  return shared_tile_date_;
}
inline void QuadtreeImageryDates::set_shared_tile_date(::google::protobuf::int32 value) {
  set_has_shared_tile_date();
  shared_tile_date_ = value;
}

// repeated int32 coarse_tile_dates = 3;
inline int QuadtreeImageryDates::coarse_tile_dates_size() const {
  return coarse_tile_dates_.size();
}
inline void QuadtreeImageryDates::clear_coarse_tile_dates() {
  coarse_tile_dates_.Clear();
}
inline ::google::protobuf::int32 QuadtreeImageryDates::coarse_tile_dates(int index) const {
  return coarse_tile_dates_.Get(index);
}
inline void QuadtreeImageryDates::set_coarse_tile_dates(int index, ::google::protobuf::int32 value) {
  coarse_tile_dates_.Set(index, value);
}
inline void QuadtreeImageryDates::add_coarse_tile_dates(::google::protobuf::int32 value) {
  coarse_tile_dates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuadtreeImageryDates::coarse_tile_dates() const {
  return coarse_tile_dates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuadtreeImageryDates::mutable_coarse_tile_dates() {
  return &coarse_tile_dates_;
}

// optional int32 shared_tile_milliseconds = 4;
inline bool QuadtreeImageryDates::has_shared_tile_milliseconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuadtreeImageryDates::set_has_shared_tile_milliseconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuadtreeImageryDates::clear_has_shared_tile_milliseconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuadtreeImageryDates::clear_shared_tile_milliseconds() {
  shared_tile_milliseconds_ = 0;
  clear_has_shared_tile_milliseconds();
}
inline ::google::protobuf::int32 QuadtreeImageryDates::shared_tile_milliseconds() const {
  return shared_tile_milliseconds_;
}
inline void QuadtreeImageryDates::set_shared_tile_milliseconds(::google::protobuf::int32 value) {
  set_has_shared_tile_milliseconds();
  shared_tile_milliseconds_ = value;
}

// -------------------------------------------------------------------

// QuadtreeLayer

// required .keyhole.QuadtreeLayer.LayerType type = 1;
inline bool QuadtreeLayer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreeLayer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreeLayer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreeLayer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::keyhole::QuadtreeLayer_LayerType QuadtreeLayer::type() const {
  return static_cast< ::keyhole::QuadtreeLayer_LayerType >(type_);
}
inline void QuadtreeLayer::set_type(::keyhole::QuadtreeLayer_LayerType value) {
  GOOGLE_DCHECK(::keyhole::QuadtreeLayer_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 layer_epoch = 2;
inline bool QuadtreeLayer::has_layer_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreeLayer::set_has_layer_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreeLayer::clear_has_layer_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreeLayer::clear_layer_epoch() {
  layer_epoch_ = 0;
  clear_has_layer_epoch();
}
inline ::google::protobuf::int32 QuadtreeLayer::layer_epoch() const {
  return layer_epoch_;
}
inline void QuadtreeLayer::set_layer_epoch(::google::protobuf::int32 value) {
  set_has_layer_epoch();
  layer_epoch_ = value;
}

// optional int32 provider = 3;
inline bool QuadtreeLayer::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuadtreeLayer::set_has_provider() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuadtreeLayer::clear_has_provider() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuadtreeLayer::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
inline ::google::protobuf::int32 QuadtreeLayer::provider() const {
  return provider_;
}
inline void QuadtreeLayer::set_provider(::google::protobuf::int32 value) {
  set_has_provider();
  provider_ = value;
}

// optional .keyhole.QuadtreeImageryDates dates_layer = 4;
inline bool QuadtreeLayer::has_dates_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuadtreeLayer::set_has_dates_layer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuadtreeLayer::clear_has_dates_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuadtreeLayer::clear_dates_layer() {
  if (dates_layer_ != NULL) dates_layer_->::keyhole::QuadtreeImageryDates::Clear();
  clear_has_dates_layer();
}
inline const ::keyhole::QuadtreeImageryDates& QuadtreeLayer::dates_layer() const {
  return dates_layer_ != NULL ? *dates_layer_ : *default_instance_->dates_layer_;
}
inline ::keyhole::QuadtreeImageryDates* QuadtreeLayer::mutable_dates_layer() {
  set_has_dates_layer();
  if (dates_layer_ == NULL) dates_layer_ = new ::keyhole::QuadtreeImageryDates;
  return dates_layer_;
}
inline ::keyhole::QuadtreeImageryDates* QuadtreeLayer::release_dates_layer() {
  clear_has_dates_layer();
  ::keyhole::QuadtreeImageryDates* temp = dates_layer_;
  dates_layer_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// QuadtreeNode

// optional int32 flags = 1;
inline bool QuadtreeNode::has_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreeNode::set_has_flags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreeNode::clear_has_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreeNode::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 QuadtreeNode::flags() const {
  return flags_;
}
inline void QuadtreeNode::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
}

// optional int32 cache_node_epoch = 2;
inline bool QuadtreeNode::has_cache_node_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreeNode::set_has_cache_node_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreeNode::clear_has_cache_node_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreeNode::clear_cache_node_epoch() {
  cache_node_epoch_ = 0;
  clear_has_cache_node_epoch();
}
inline ::google::protobuf::int32 QuadtreeNode::cache_node_epoch() const {
  return cache_node_epoch_;
}
inline void QuadtreeNode::set_cache_node_epoch(::google::protobuf::int32 value) {
  set_has_cache_node_epoch();
  cache_node_epoch_ = value;
}

// repeated .keyhole.QuadtreeLayer layer = 3;
inline int QuadtreeNode::layer_size() const {
  return layer_.size();
}
inline void QuadtreeNode::clear_layer() {
  layer_.Clear();
}
inline const ::keyhole::QuadtreeLayer& QuadtreeNode::layer(int index) const {
  return layer_.Get(index);
}
inline ::keyhole::QuadtreeLayer* QuadtreeNode::mutable_layer(int index) {
  return layer_.Mutable(index);
}
inline ::keyhole::QuadtreeLayer* QuadtreeNode::add_layer() {
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeLayer >&
QuadtreeNode::layer() const {
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeLayer >*
QuadtreeNode::mutable_layer() {
  return &layer_;
}

// repeated .keyhole.QuadtreeChannel channel = 4;
inline int QuadtreeNode::channel_size() const {
  return channel_.size();
}
inline void QuadtreeNode::clear_channel() {
  channel_.Clear();
}
inline const ::keyhole::QuadtreeChannel& QuadtreeNode::channel(int index) const {
  return channel_.Get(index);
}
inline ::keyhole::QuadtreeChannel* QuadtreeNode::mutable_channel(int index) {
  return channel_.Mutable(index);
}
inline ::keyhole::QuadtreeChannel* QuadtreeNode::add_channel() {
  return channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeChannel >&
QuadtreeNode::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreeChannel >*
QuadtreeNode::mutable_channel() {
  return &channel_;
}

// -------------------------------------------------------------------

// QuadtreePacket_SparseQuadtreeNode

// required int32 index = 3;
inline bool QuadtreePacket_SparseQuadtreeNode::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreePacket_SparseQuadtreeNode::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreePacket_SparseQuadtreeNode::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreePacket_SparseQuadtreeNode::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 QuadtreePacket_SparseQuadtreeNode::index() const {
  return index_;
}
inline void QuadtreePacket_SparseQuadtreeNode::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required .keyhole.QuadtreeNode Node = 4;
inline bool QuadtreePacket_SparseQuadtreeNode::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadtreePacket_SparseQuadtreeNode::set_has_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadtreePacket_SparseQuadtreeNode::clear_has_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadtreePacket_SparseQuadtreeNode::clear_node() {
  if (node_ != NULL) node_->::keyhole::QuadtreeNode::Clear();
  clear_has_node();
}
inline const ::keyhole::QuadtreeNode& QuadtreePacket_SparseQuadtreeNode::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::keyhole::QuadtreeNode* QuadtreePacket_SparseQuadtreeNode::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::keyhole::QuadtreeNode;
  return node_;
}
inline ::keyhole::QuadtreeNode* QuadtreePacket_SparseQuadtreeNode::release_node() {
  clear_has_node();
  ::keyhole::QuadtreeNode* temp = node_;
  node_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// QuadtreePacket

// required int32 packet_epoch = 1;
inline bool QuadtreePacket::has_packet_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadtreePacket::set_has_packet_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadtreePacket::clear_has_packet_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadtreePacket::clear_packet_epoch() {
  packet_epoch_ = 0;
  clear_has_packet_epoch();
}
inline ::google::protobuf::int32 QuadtreePacket::packet_epoch() const {
  return packet_epoch_;
}
inline void QuadtreePacket::set_packet_epoch(::google::protobuf::int32 value) {
  set_has_packet_epoch();
  packet_epoch_ = value;
}

// repeated group SparseQuadtreeNode = 2 {
inline int QuadtreePacket::sparsequadtreenode_size() const {
  return sparsequadtreenode_.size();
}
inline void QuadtreePacket::clear_sparsequadtreenode() {
  sparsequadtreenode_.Clear();
}
inline const ::keyhole::QuadtreePacket_SparseQuadtreeNode& QuadtreePacket::sparsequadtreenode(int index) const {
  return sparsequadtreenode_.Get(index);
}
inline ::keyhole::QuadtreePacket_SparseQuadtreeNode* QuadtreePacket::mutable_sparsequadtreenode(int index) {
  return sparsequadtreenode_.Mutable(index);
}
inline ::keyhole::QuadtreePacket_SparseQuadtreeNode* QuadtreePacket::add_sparsequadtreenode() {
  return sparsequadtreenode_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreePacket_SparseQuadtreeNode >&
QuadtreePacket::sparsequadtreenode() const {
  return sparsequadtreenode_;
}
inline ::google::protobuf::RepeatedPtrField< ::keyhole::QuadtreePacket_SparseQuadtreeNode >*
QuadtreePacket::mutable_sparsequadtreenode() {
  return &sparsequadtreenode_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace keyhole

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keyhole::QuadtreeLayer_LayerType>() {
  return ::keyhole::QuadtreeLayer_LayerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::keyhole::QuadtreeNode_NodeFlags>() {
  return ::keyhole::QuadtreeNode_NodeFlags_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_quadtreeset_2eprotodevel__INCLUDED
