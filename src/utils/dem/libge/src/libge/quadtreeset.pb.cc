// Generated by the protocol buffer compiler.  DO NOT EDIT!
//#pragma once
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "quadtreeset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace keyhole {

namespace {

const ::google::protobuf::Descriptor* QuadtreeChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreeChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuadtreeImageryTimedTile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreeImageryTimedTile_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuadtreeImageryDatedTile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreeImageryDatedTile_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuadtreeImageryDates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreeImageryDates_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuadtreeLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreeLayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QuadtreeLayer_LayerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QuadtreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreeNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QuadtreeNode_NodeFlags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QuadtreePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreePacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuadtreePacket_SparseQuadtreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuadtreePacket_SparseQuadtreeNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_quadtreeset_2eprotodevel() {
  protobuf_AddDesc_quadtreeset_2eprotodevel();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "quadtreeset.protodevel");
  GOOGLE_CHECK(file != NULL);
  QuadtreeChannel_descriptor_ = file->message_type(0);
  static const int QuadtreeChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeChannel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeChannel, channel_epoch_),
  };
  QuadtreeChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreeChannel_descriptor_,
      QuadtreeChannel::default_instance_,
      QuadtreeChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreeChannel));
  QuadtreeImageryTimedTile_descriptor_ = file->message_type(1);
  static const int QuadtreeImageryTimedTile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryTimedTile, milliseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryTimedTile, timed_tile_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryTimedTile, provider_),
  };
  QuadtreeImageryTimedTile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreeImageryTimedTile_descriptor_,
      QuadtreeImageryTimedTile::default_instance_,
      QuadtreeImageryTimedTile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryTimedTile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryTimedTile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreeImageryTimedTile));
  QuadtreeImageryDatedTile_descriptor_ = file->message_type(2);
  static const int QuadtreeImageryDatedTile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDatedTile, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDatedTile, dated_tile_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDatedTile, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDatedTile, timed_tiles_),
  };
  QuadtreeImageryDatedTile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreeImageryDatedTile_descriptor_,
      QuadtreeImageryDatedTile::default_instance_,
      QuadtreeImageryDatedTile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDatedTile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDatedTile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreeImageryDatedTile));
  QuadtreeImageryDates_descriptor_ = file->message_type(3);
  static const int QuadtreeImageryDates_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDates, dated_tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDates, shared_tile_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDates, coarse_tile_dates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDates, shared_tile_milliseconds_),
  };
  QuadtreeImageryDates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreeImageryDates_descriptor_,
      QuadtreeImageryDates::default_instance_,
      QuadtreeImageryDates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeImageryDates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreeImageryDates));
  QuadtreeLayer_descriptor_ = file->message_type(4);
  static const int QuadtreeLayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeLayer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeLayer, layer_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeLayer, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeLayer, dates_layer_),
  };
  QuadtreeLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreeLayer_descriptor_,
      QuadtreeLayer::default_instance_,
      QuadtreeLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreeLayer));
  QuadtreeLayer_LayerType_descriptor_ = QuadtreeLayer_descriptor_->enum_type(0);
  QuadtreeNode_descriptor_ = file->message_type(5);
  static const int QuadtreeNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeNode, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeNode, cache_node_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeNode, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeNode, channel_),
  };
  QuadtreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreeNode_descriptor_,
      QuadtreeNode::default_instance_,
      QuadtreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreeNode));
  QuadtreeNode_NodeFlags_descriptor_ = QuadtreeNode_descriptor_->enum_type(0);
  QuadtreePacket_descriptor_ = file->message_type(6);
  static const int QuadtreePacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket, packet_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket, sparsequadtreenode_),
  };
  QuadtreePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreePacket_descriptor_,
      QuadtreePacket::default_instance_,
      QuadtreePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreePacket));
  QuadtreePacket_SparseQuadtreeNode_descriptor_ = QuadtreePacket_descriptor_->nested_type(0);
  static const int QuadtreePacket_SparseQuadtreeNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket_SparseQuadtreeNode, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket_SparseQuadtreeNode, node_),
  };
  QuadtreePacket_SparseQuadtreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuadtreePacket_SparseQuadtreeNode_descriptor_,
      QuadtreePacket_SparseQuadtreeNode::default_instance_,
      QuadtreePacket_SparseQuadtreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket_SparseQuadtreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadtreePacket_SparseQuadtreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuadtreePacket_SparseQuadtreeNode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_quadtreeset_2eprotodevel);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreeChannel_descriptor_, &QuadtreeChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreeImageryTimedTile_descriptor_, &QuadtreeImageryTimedTile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreeImageryDatedTile_descriptor_, &QuadtreeImageryDatedTile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreeImageryDates_descriptor_, &QuadtreeImageryDates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreeLayer_descriptor_, &QuadtreeLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreeNode_descriptor_, &QuadtreeNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreePacket_descriptor_, &QuadtreePacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuadtreePacket_SparseQuadtreeNode_descriptor_, &QuadtreePacket_SparseQuadtreeNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_quadtreeset_2eprotodevel() {
  delete QuadtreeChannel::default_instance_;
  delete QuadtreeChannel_reflection_;
  delete QuadtreeImageryTimedTile::default_instance_;
  delete QuadtreeImageryTimedTile_reflection_;
  delete QuadtreeImageryDatedTile::default_instance_;
  delete QuadtreeImageryDatedTile_reflection_;
  delete QuadtreeImageryDates::default_instance_;
  delete QuadtreeImageryDates_reflection_;
  delete QuadtreeLayer::default_instance_;
  delete QuadtreeLayer_reflection_;
  delete QuadtreeNode::default_instance_;
  delete QuadtreeNode_reflection_;
  delete QuadtreePacket::default_instance_;
  delete QuadtreePacket_reflection_;
  delete QuadtreePacket_SparseQuadtreeNode::default_instance_;
  delete QuadtreePacket_SparseQuadtreeNode_reflection_;
}

void protobuf_AddDesc_quadtreeset_2eprotodevel() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026quadtreeset.protodevel\022\007keyhole\"6\n\017Qua"
    "dtreeChannel\022\014\n\004type\030\001 \002(\005\022\025\n\rchannel_ep"
    "och\030\002 \002(\005\"\\\n\030QuadtreeImageryTimedTile\022\024\n"
    "\014milliseconds\030\001 \002(\005\022\030\n\020timed_tile_epoch\030"
    "\002 \002(\005\022\020\n\010provider\030\003 \001(\005\"\214\001\n\030QuadtreeImag"
    "eryDatedTile\022\014\n\004date\030\001 \002(\005\022\030\n\020dated_tile"
    "_epoch\030\002 \002(\005\022\020\n\010provider\030\003 \002(\005\0226\n\013timed_"
    "tiles\030\004 \003(\0132!.keyhole.QuadtreeImageryTim"
    "edTile\"\244\001\n\024QuadtreeImageryDates\0225\n\ndated"
    "_tile\030\001 \003(\0132!.keyhole.QuadtreeImageryDat"
    "edTile\022\030\n\020shared_tile_date\030\002 \001(\005\022\031\n\021coar"
    "se_tile_dates\030\003 \003(\005\022 \n\030shared_tile_milli"
    "seconds\030\004 \001(\005\"\216\002\n\rQuadtreeLayer\022.\n\004type\030"
    "\001 \002(\0162 .keyhole.QuadtreeLayer.LayerType\022"
    "\023\n\013layer_epoch\030\002 \002(\005\022\020\n\010provider\030\003 \001(\005\0222"
    "\n\013dates_layer\030\004 \001(\0132\035.keyhole.QuadtreeIm"
    "ageryDates\"r\n\tLayerType\022\026\n\022LAYER_TYPE_IM"
    "AGERY\020\000\022\026\n\022LAYER_TYPE_TERRAIN\020\001\022\025\n\021LAYER"
    "_TYPE_VECTOR\020\002\022\036\n\032LAYER_TYPE_IMAGERY_HIS"
    "TORY\020\003\"\240\002\n\014QuadtreeNode\022\r\n\005flags\030\001 \001(\005\022\030"
    "\n\020cache_node_epoch\030\002 \001(\005\022%\n\005layer\030\003 \003(\0132"
    "\026.keyhole.QuadtreeLayer\022)\n\007channel\030\004 \003(\013"
    "2\030.keyhole.QuadtreeChannel\"\224\001\n\tNodeFlags"
    "\022\032\n\026NODE_FLAGS_CHILD_COUNT\020\004\022\030\n\024NODE_FLA"
    "GS_CACHE_BIT\020\004\022\033\n\027NODE_FLAGS_DRAWABLE_BI"
    "T\020\005\022\030\n\024NODE_FLAGS_IMAGE_BIT\020\006\022\032\n\026NODE_FL"
    "AGS_TERRAIN_BIT\020\007\"\270\001\n\016QuadtreePacket\022\024\n\014"
    "packet_epoch\030\001 \002(\005\022F\n\022sparsequadtreenode"
    "\030\002 \003(\n2*.keyhole.QuadtreePacket.SparseQu"
    "adtreeNode\032H\n\022SparseQuadtreeNode\022\r\n\005inde"
    "x\030\003 \002(\005\022#\n\004Node\030\004 \002(\0132\025.keyhole.Quadtree"
    "Node", 1244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "quadtreeset.protodevel", &protobuf_RegisterTypes);
  QuadtreeChannel::default_instance_ = new QuadtreeChannel();
  QuadtreeImageryTimedTile::default_instance_ = new QuadtreeImageryTimedTile();
  QuadtreeImageryDatedTile::default_instance_ = new QuadtreeImageryDatedTile();
  QuadtreeImageryDates::default_instance_ = new QuadtreeImageryDates();
  QuadtreeLayer::default_instance_ = new QuadtreeLayer();
  QuadtreeNode::default_instance_ = new QuadtreeNode();
  QuadtreePacket::default_instance_ = new QuadtreePacket();
  QuadtreePacket_SparseQuadtreeNode::default_instance_ = new QuadtreePacket_SparseQuadtreeNode();
  QuadtreeChannel::default_instance_->InitAsDefaultInstance();
  QuadtreeImageryTimedTile::default_instance_->InitAsDefaultInstance();
  QuadtreeImageryDatedTile::default_instance_->InitAsDefaultInstance();
  QuadtreeImageryDates::default_instance_->InitAsDefaultInstance();
  QuadtreeLayer::default_instance_->InitAsDefaultInstance();
  QuadtreeNode::default_instance_->InitAsDefaultInstance();
  QuadtreePacket::default_instance_->InitAsDefaultInstance();
  QuadtreePacket_SparseQuadtreeNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_quadtreeset_2eprotodevel);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_quadtreeset_2eprotodevel {
  StaticDescriptorInitializer_quadtreeset_2eprotodevel() {
    protobuf_AddDesc_quadtreeset_2eprotodevel();
  }
} static_descriptor_initializer_quadtreeset_2eprotodevel_;


// ===================================================================

#ifndef _MSC_VER
const int QuadtreeChannel::kTypeFieldNumber;
const int QuadtreeChannel::kChannelEpochFieldNumber;
#endif  // !_MSC_VER

QuadtreeChannel::QuadtreeChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreeChannel::InitAsDefaultInstance() {
}

QuadtreeChannel::QuadtreeChannel(const QuadtreeChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreeChannel::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  channel_epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreeChannel::~QuadtreeChannel() {
  SharedDtor();
}

void QuadtreeChannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuadtreeChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreeChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeChannel_descriptor_;
}

const QuadtreeChannel& QuadtreeChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreeChannel* QuadtreeChannel::default_instance_ = NULL;

QuadtreeChannel* QuadtreeChannel::New() const {
  return new QuadtreeChannel;
}

void QuadtreeChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    channel_epoch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreeChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_epoch;
        break;
      }
      
      // required int32 channel_epoch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_epoch_)));
          set_has_channel_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreeChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 channel_epoch = 2;
  if (has_channel_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_epoch(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreeChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 channel_epoch = 2;
  if (has_channel_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel_epoch(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreeChannel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 channel_epoch = 2;
    if (has_channel_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_epoch());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreeChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreeChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreeChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreeChannel::MergeFrom(const QuadtreeChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channel_epoch()) {
      set_channel_epoch(from.channel_epoch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreeChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreeChannel::CopyFrom(const QuadtreeChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreeChannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QuadtreeChannel::Swap(QuadtreeChannel* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(channel_epoch_, other->channel_epoch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreeChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreeChannel_descriptor_;
  metadata.reflection = QuadtreeChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuadtreeImageryTimedTile::kMillisecondsFieldNumber;
const int QuadtreeImageryTimedTile::kTimedTileEpochFieldNumber;
const int QuadtreeImageryTimedTile::kProviderFieldNumber;
#endif  // !_MSC_VER

QuadtreeImageryTimedTile::QuadtreeImageryTimedTile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreeImageryTimedTile::InitAsDefaultInstance() {
}

QuadtreeImageryTimedTile::QuadtreeImageryTimedTile(const QuadtreeImageryTimedTile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreeImageryTimedTile::SharedCtor() {
  _cached_size_ = 0;
  milliseconds_ = 0;
  timed_tile_epoch_ = 0;
  provider_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreeImageryTimedTile::~QuadtreeImageryTimedTile() {
  SharedDtor();
}

void QuadtreeImageryTimedTile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuadtreeImageryTimedTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreeImageryTimedTile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeImageryTimedTile_descriptor_;
}

const QuadtreeImageryTimedTile& QuadtreeImageryTimedTile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreeImageryTimedTile* QuadtreeImageryTimedTile::default_instance_ = NULL;

QuadtreeImageryTimedTile* QuadtreeImageryTimedTile::New() const {
  return new QuadtreeImageryTimedTile;
}

void QuadtreeImageryTimedTile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    milliseconds_ = 0;
    timed_tile_epoch_ = 0;
    provider_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreeImageryTimedTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 milliseconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milliseconds_)));
          set_has_milliseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timed_tile_epoch;
        break;
      }
      
      // required int32 timed_tile_epoch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timed_tile_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timed_tile_epoch_)));
          set_has_timed_tile_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provider;
        break;
      }
      
      // optional int32 provider = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provider_)));
          set_has_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreeImageryTimedTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 milliseconds = 1;
  if (has_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->milliseconds(), output);
  }
  
  // required int32 timed_tile_epoch = 2;
  if (has_timed_tile_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timed_tile_epoch(), output);
  }
  
  // optional int32 provider = 3;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provider(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreeImageryTimedTile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 milliseconds = 1;
  if (has_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->milliseconds(), target);
  }
  
  // required int32 timed_tile_epoch = 2;
  if (has_timed_tile_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timed_tile_epoch(), target);
  }
  
  // optional int32 provider = 3;
  if (has_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provider(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreeImageryTimedTile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 milliseconds = 1;
    if (has_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milliseconds());
    }
    
    // required int32 timed_tile_epoch = 2;
    if (has_timed_tile_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timed_tile_epoch());
    }
    
    // optional int32 provider = 3;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provider());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreeImageryTimedTile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreeImageryTimedTile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreeImageryTimedTile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreeImageryTimedTile::MergeFrom(const QuadtreeImageryTimedTile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_milliseconds()) {
      set_milliseconds(from.milliseconds());
    }
    if (from.has_timed_tile_epoch()) {
      set_timed_tile_epoch(from.timed_tile_epoch());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreeImageryTimedTile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreeImageryTimedTile::CopyFrom(const QuadtreeImageryTimedTile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreeImageryTimedTile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QuadtreeImageryTimedTile::Swap(QuadtreeImageryTimedTile* other) {
  if (other != this) {
    std::swap(milliseconds_, other->milliseconds_);
    std::swap(timed_tile_epoch_, other->timed_tile_epoch_);
    std::swap(provider_, other->provider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreeImageryTimedTile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreeImageryTimedTile_descriptor_;
  metadata.reflection = QuadtreeImageryTimedTile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuadtreeImageryDatedTile::kDateFieldNumber;
const int QuadtreeImageryDatedTile::kDatedTileEpochFieldNumber;
const int QuadtreeImageryDatedTile::kProviderFieldNumber;
const int QuadtreeImageryDatedTile::kTimedTilesFieldNumber;
#endif  // !_MSC_VER

QuadtreeImageryDatedTile::QuadtreeImageryDatedTile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreeImageryDatedTile::InitAsDefaultInstance() {
}

QuadtreeImageryDatedTile::QuadtreeImageryDatedTile(const QuadtreeImageryDatedTile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreeImageryDatedTile::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  dated_tile_epoch_ = 0;
  provider_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreeImageryDatedTile::~QuadtreeImageryDatedTile() {
  SharedDtor();
}

void QuadtreeImageryDatedTile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuadtreeImageryDatedTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreeImageryDatedTile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeImageryDatedTile_descriptor_;
}

const QuadtreeImageryDatedTile& QuadtreeImageryDatedTile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreeImageryDatedTile* QuadtreeImageryDatedTile::default_instance_ = NULL;

QuadtreeImageryDatedTile* QuadtreeImageryDatedTile::New() const {
  return new QuadtreeImageryDatedTile;
}

void QuadtreeImageryDatedTile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    dated_tile_epoch_ = 0;
    provider_ = 0;
  }
  timed_tiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreeImageryDatedTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dated_tile_epoch;
        break;
      }
      
      // required int32 dated_tile_epoch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dated_tile_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dated_tile_epoch_)));
          set_has_dated_tile_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provider;
        break;
      }
      
      // required int32 provider = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provider_)));
          set_has_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timed_tiles;
        break;
      }
      
      // repeated .keyhole.QuadtreeImageryTimedTile timed_tiles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timed_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timed_tiles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreeImageryDatedTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 dated_tile_epoch = 2;
  if (has_dated_tile_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dated_tile_epoch(), output);
  }
  
  // required int32 provider = 3;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provider(), output);
  }
  
  // repeated .keyhole.QuadtreeImageryTimedTile timed_tiles = 4;
  for (int i = 0; i < this->timed_tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timed_tiles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreeImageryDatedTile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 dated_tile_epoch = 2;
  if (has_dated_tile_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dated_tile_epoch(), target);
  }
  
  // required int32 provider = 3;
  if (has_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provider(), target);
  }
  
  // repeated .keyhole.QuadtreeImageryTimedTile timed_tiles = 4;
  for (int i = 0; i < this->timed_tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timed_tiles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreeImageryDatedTile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 dated_tile_epoch = 2;
    if (has_dated_tile_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dated_tile_epoch());
    }
    
    // required int32 provider = 3;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provider());
    }
    
  }
  // repeated .keyhole.QuadtreeImageryTimedTile timed_tiles = 4;
  total_size += 1 * this->timed_tiles_size();
  for (int i = 0; i < this->timed_tiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timed_tiles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreeImageryDatedTile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreeImageryDatedTile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreeImageryDatedTile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreeImageryDatedTile::MergeFrom(const QuadtreeImageryDatedTile& from) {
  GOOGLE_CHECK_NE(&from, this);
  timed_tiles_.MergeFrom(from.timed_tiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_dated_tile_epoch()) {
      set_dated_tile_epoch(from.dated_tile_epoch());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreeImageryDatedTile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreeImageryDatedTile::CopyFrom(const QuadtreeImageryDatedTile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreeImageryDatedTile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < timed_tiles_size(); i++) {
    if (!this->timed_tiles(i).IsInitialized()) return false;
  }
  return true;
}

void QuadtreeImageryDatedTile::Swap(QuadtreeImageryDatedTile* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(dated_tile_epoch_, other->dated_tile_epoch_);
    std::swap(provider_, other->provider_);
    timed_tiles_.Swap(&other->timed_tiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreeImageryDatedTile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreeImageryDatedTile_descriptor_;
  metadata.reflection = QuadtreeImageryDatedTile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuadtreeImageryDates::kDatedTileFieldNumber;
const int QuadtreeImageryDates::kSharedTileDateFieldNumber;
const int QuadtreeImageryDates::kCoarseTileDatesFieldNumber;
const int QuadtreeImageryDates::kSharedTileMillisecondsFieldNumber;
#endif  // !_MSC_VER

QuadtreeImageryDates::QuadtreeImageryDates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreeImageryDates::InitAsDefaultInstance() {
}

QuadtreeImageryDates::QuadtreeImageryDates(const QuadtreeImageryDates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreeImageryDates::SharedCtor() {
  _cached_size_ = 0;
  shared_tile_date_ = 0;
  shared_tile_milliseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreeImageryDates::~QuadtreeImageryDates() {
  SharedDtor();
}

void QuadtreeImageryDates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuadtreeImageryDates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreeImageryDates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeImageryDates_descriptor_;
}

const QuadtreeImageryDates& QuadtreeImageryDates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreeImageryDates* QuadtreeImageryDates::default_instance_ = NULL;

QuadtreeImageryDates* QuadtreeImageryDates::New() const {
  return new QuadtreeImageryDates;
}

void QuadtreeImageryDates::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    shared_tile_date_ = 0;
    shared_tile_milliseconds_ = 0;
  }
  dated_tile_.Clear();
  coarse_tile_dates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreeImageryDates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .keyhole.QuadtreeImageryDatedTile dated_tile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dated_tile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dated_tile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dated_tile;
        if (input->ExpectTag(16)) goto parse_shared_tile_date;
        break;
      }
      
      // optional int32 shared_tile_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shared_tile_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_tile_date_)));
          set_has_shared_tile_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coarse_tile_dates;
        break;
      }
      
      // repeated int32 coarse_tile_dates = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coarse_tile_dates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_coarse_tile_dates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_coarse_tile_dates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coarse_tile_dates;
        if (input->ExpectTag(32)) goto parse_shared_tile_milliseconds;
        break;
      }
      
      // optional int32 shared_tile_milliseconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shared_tile_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_tile_milliseconds_)));
          set_has_shared_tile_milliseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreeImageryDates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .keyhole.QuadtreeImageryDatedTile dated_tile = 1;
  for (int i = 0; i < this->dated_tile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dated_tile(i), output);
  }
  
  // optional int32 shared_tile_date = 2;
  if (has_shared_tile_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shared_tile_date(), output);
  }
  
  // repeated int32 coarse_tile_dates = 3;
  for (int i = 0; i < this->coarse_tile_dates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->coarse_tile_dates(i), output);
  }
  
  // optional int32 shared_tile_milliseconds = 4;
  if (has_shared_tile_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shared_tile_milliseconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreeImageryDates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .keyhole.QuadtreeImageryDatedTile dated_tile = 1;
  for (int i = 0; i < this->dated_tile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dated_tile(i), target);
  }
  
  // optional int32 shared_tile_date = 2;
  if (has_shared_tile_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shared_tile_date(), target);
  }
  
  // repeated int32 coarse_tile_dates = 3;
  for (int i = 0; i < this->coarse_tile_dates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->coarse_tile_dates(i), target);
  }
  
  // optional int32 shared_tile_milliseconds = 4;
  if (has_shared_tile_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shared_tile_milliseconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreeImageryDates::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 shared_tile_date = 2;
    if (has_shared_tile_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shared_tile_date());
    }
    
    // optional int32 shared_tile_milliseconds = 4;
    if (has_shared_tile_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shared_tile_milliseconds());
    }
    
  }
  // repeated .keyhole.QuadtreeImageryDatedTile dated_tile = 1;
  total_size += 1 * this->dated_tile_size();
  for (int i = 0; i < this->dated_tile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dated_tile(i));
  }
  
  // repeated int32 coarse_tile_dates = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->coarse_tile_dates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->coarse_tile_dates(i));
    }
    total_size += 1 * this->coarse_tile_dates_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreeImageryDates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreeImageryDates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreeImageryDates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreeImageryDates::MergeFrom(const QuadtreeImageryDates& from) {
  GOOGLE_CHECK_NE(&from, this);
  dated_tile_.MergeFrom(from.dated_tile_);
  coarse_tile_dates_.MergeFrom(from.coarse_tile_dates_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_shared_tile_date()) {
      set_shared_tile_date(from.shared_tile_date());
    }
    if (from.has_shared_tile_milliseconds()) {
      set_shared_tile_milliseconds(from.shared_tile_milliseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreeImageryDates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreeImageryDates::CopyFrom(const QuadtreeImageryDates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreeImageryDates::IsInitialized() const {
  
  for (int i = 0; i < dated_tile_size(); i++) {
    if (!this->dated_tile(i).IsInitialized()) return false;
  }
  return true;
}

void QuadtreeImageryDates::Swap(QuadtreeImageryDates* other) {
  if (other != this) {
    dated_tile_.Swap(&other->dated_tile_);
    std::swap(shared_tile_date_, other->shared_tile_date_);
    coarse_tile_dates_.Swap(&other->coarse_tile_dates_);
    std::swap(shared_tile_milliseconds_, other->shared_tile_milliseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreeImageryDates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreeImageryDates_descriptor_;
  metadata.reflection = QuadtreeImageryDates_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QuadtreeLayer_LayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeLayer_LayerType_descriptor_;
}
bool QuadtreeLayer_LayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QuadtreeLayer_LayerType QuadtreeLayer::LAYER_TYPE_IMAGERY;
const QuadtreeLayer_LayerType QuadtreeLayer::LAYER_TYPE_TERRAIN;
const QuadtreeLayer_LayerType QuadtreeLayer::LAYER_TYPE_VECTOR;
const QuadtreeLayer_LayerType QuadtreeLayer::LAYER_TYPE_IMAGERY_HISTORY;
const QuadtreeLayer_LayerType QuadtreeLayer::LayerType_MIN;
const QuadtreeLayer_LayerType QuadtreeLayer::LayerType_MAX;
const int QuadtreeLayer::LayerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QuadtreeLayer::kTypeFieldNumber;
const int QuadtreeLayer::kLayerEpochFieldNumber;
const int QuadtreeLayer::kProviderFieldNumber;
const int QuadtreeLayer::kDatesLayerFieldNumber;
#endif  // !_MSC_VER

QuadtreeLayer::QuadtreeLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreeLayer::InitAsDefaultInstance() {
  dates_layer_ = const_cast< ::keyhole::QuadtreeImageryDates*>(&::keyhole::QuadtreeImageryDates::default_instance());
}

QuadtreeLayer::QuadtreeLayer(const QuadtreeLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreeLayer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  layer_epoch_ = 0;
  provider_ = 0;
  dates_layer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreeLayer::~QuadtreeLayer() {
  SharedDtor();
}

void QuadtreeLayer::SharedDtor() {
  if (this != default_instance_) {
    delete dates_layer_;
  }
}

void QuadtreeLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreeLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeLayer_descriptor_;
}

const QuadtreeLayer& QuadtreeLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreeLayer* QuadtreeLayer::default_instance_ = NULL;

QuadtreeLayer* QuadtreeLayer::New() const {
  return new QuadtreeLayer;
}

void QuadtreeLayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    layer_epoch_ = 0;
    provider_ = 0;
    if (has_dates_layer()) {
      if (dates_layer_ != NULL) dates_layer_->::keyhole::QuadtreeImageryDates::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreeLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .keyhole.QuadtreeLayer.LayerType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::keyhole::QuadtreeLayer_LayerType_IsValid(value)) {
            set_type(static_cast< ::keyhole::QuadtreeLayer_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layer_epoch;
        break;
      }
      
      // required int32 layer_epoch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_epoch_)));
          set_has_layer_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provider;
        break;
      }
      
      // optional int32 provider = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provider_)));
          set_has_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dates_layer;
        break;
      }
      
      // optional .keyhole.QuadtreeImageryDates dates_layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dates_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dates_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreeLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .keyhole.QuadtreeLayer.LayerType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int32 layer_epoch = 2;
  if (has_layer_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->layer_epoch(), output);
  }
  
  // optional int32 provider = 3;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provider(), output);
  }
  
  // optional .keyhole.QuadtreeImageryDates dates_layer = 4;
  if (has_dates_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dates_layer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreeLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .keyhole.QuadtreeLayer.LayerType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int32 layer_epoch = 2;
  if (has_layer_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->layer_epoch(), target);
  }
  
  // optional int32 provider = 3;
  if (has_provider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provider(), target);
  }
  
  // optional .keyhole.QuadtreeImageryDates dates_layer = 4;
  if (has_dates_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dates_layer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreeLayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .keyhole.QuadtreeLayer.LayerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 layer_epoch = 2;
    if (has_layer_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer_epoch());
    }
    
    // optional int32 provider = 3;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provider());
    }
    
    // optional .keyhole.QuadtreeImageryDates dates_layer = 4;
    if (has_dates_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dates_layer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreeLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreeLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreeLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreeLayer::MergeFrom(const QuadtreeLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_layer_epoch()) {
      set_layer_epoch(from.layer_epoch());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_dates_layer()) {
      mutable_dates_layer()->::keyhole::QuadtreeImageryDates::MergeFrom(from.dates_layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreeLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreeLayer::CopyFrom(const QuadtreeLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreeLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_dates_layer()) {
    if (!this->dates_layer().IsInitialized()) return false;
  }
  return true;
}

void QuadtreeLayer::Swap(QuadtreeLayer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(layer_epoch_, other->layer_epoch_);
    std::swap(provider_, other->provider_);
    std::swap(dates_layer_, other->dates_layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreeLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreeLayer_descriptor_;
  metadata.reflection = QuadtreeLayer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QuadtreeNode_NodeFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeNode_NodeFlags_descriptor_;
}
bool QuadtreeNode_NodeFlags_IsValid(int value) {
  switch(value) {
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QuadtreeNode_NodeFlags QuadtreeNode::NODE_FLAGS_CHILD_COUNT;
const QuadtreeNode_NodeFlags QuadtreeNode::NODE_FLAGS_CACHE_BIT;
const QuadtreeNode_NodeFlags QuadtreeNode::NODE_FLAGS_DRAWABLE_BIT;
const QuadtreeNode_NodeFlags QuadtreeNode::NODE_FLAGS_IMAGE_BIT;
const QuadtreeNode_NodeFlags QuadtreeNode::NODE_FLAGS_TERRAIN_BIT;
const QuadtreeNode_NodeFlags QuadtreeNode::NodeFlags_MIN;
const QuadtreeNode_NodeFlags QuadtreeNode::NodeFlags_MAX;
const int QuadtreeNode::NodeFlags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QuadtreeNode::kFlagsFieldNumber;
const int QuadtreeNode::kCacheNodeEpochFieldNumber;
const int QuadtreeNode::kLayerFieldNumber;
const int QuadtreeNode::kChannelFieldNumber;
#endif  // !_MSC_VER

QuadtreeNode::QuadtreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreeNode::InitAsDefaultInstance() {
}

QuadtreeNode::QuadtreeNode(const QuadtreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreeNode::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0;
  cache_node_epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreeNode::~QuadtreeNode() {
  SharedDtor();
}

void QuadtreeNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuadtreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreeNode_descriptor_;
}

const QuadtreeNode& QuadtreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreeNode* QuadtreeNode::default_instance_ = NULL;

QuadtreeNode* QuadtreeNode::New() const {
  return new QuadtreeNode;
}

void QuadtreeNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flags_ = 0;
    cache_node_epoch_ = 0;
  }
  layer_.Clear();
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cache_node_epoch;
        break;
      }
      
      // optional int32 cache_node_epoch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_node_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_node_epoch_)));
          set_has_cache_node_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layer;
        break;
      }
      
      // repeated .keyhole.QuadtreeLayer layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layer;
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }
      
      // repeated .keyhole.QuadtreeChannel channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }
  
  // optional int32 cache_node_epoch = 2;
  if (has_cache_node_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cache_node_epoch(), output);
  }
  
  // repeated .keyhole.QuadtreeLayer layer = 3;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layer(i), output);
  }
  
  // repeated .keyhole.QuadtreeChannel channel = 4;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->channel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flags(), target);
  }
  
  // optional int32 cache_node_epoch = 2;
  if (has_cache_node_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cache_node_epoch(), target);
  }
  
  // repeated .keyhole.QuadtreeLayer layer = 3;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layer(i), target);
  }
  
  // repeated .keyhole.QuadtreeChannel channel = 4;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->channel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreeNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
    // optional int32 cache_node_epoch = 2;
    if (has_cache_node_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_node_epoch());
    }
    
  }
  // repeated .keyhole.QuadtreeLayer layer = 3;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }
  
  // repeated .keyhole.QuadtreeChannel channel = 4;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreeNode::MergeFrom(const QuadtreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_cache_node_epoch()) {
      set_cache_node_epoch(from.cache_node_epoch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreeNode::CopyFrom(const QuadtreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreeNode::IsInitialized() const {
  
  for (int i = 0; i < layer_size(); i++) {
    if (!this->layer(i).IsInitialized()) return false;
  }
  for (int i = 0; i < channel_size(); i++) {
    if (!this->channel(i).IsInitialized()) return false;
  }
  return true;
}

void QuadtreeNode::Swap(QuadtreeNode* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(cache_node_epoch_, other->cache_node_epoch_);
    layer_.Swap(&other->layer_);
    channel_.Swap(&other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreeNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreeNode_descriptor_;
  metadata.reflection = QuadtreeNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuadtreePacket_SparseQuadtreeNode::kIndexFieldNumber;
const int QuadtreePacket_SparseQuadtreeNode::kNodeFieldNumber;
#endif  // !_MSC_VER

QuadtreePacket_SparseQuadtreeNode::QuadtreePacket_SparseQuadtreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreePacket_SparseQuadtreeNode::InitAsDefaultInstance() {
  node_ = const_cast< ::keyhole::QuadtreeNode*>(&::keyhole::QuadtreeNode::default_instance());
}

QuadtreePacket_SparseQuadtreeNode::QuadtreePacket_SparseQuadtreeNode(const QuadtreePacket_SparseQuadtreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreePacket_SparseQuadtreeNode::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreePacket_SparseQuadtreeNode::~QuadtreePacket_SparseQuadtreeNode() {
  SharedDtor();
}

void QuadtreePacket_SparseQuadtreeNode::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void QuadtreePacket_SparseQuadtreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreePacket_SparseQuadtreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreePacket_SparseQuadtreeNode_descriptor_;
}

const QuadtreePacket_SparseQuadtreeNode& QuadtreePacket_SparseQuadtreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreePacket_SparseQuadtreeNode* QuadtreePacket_SparseQuadtreeNode::default_instance_ = NULL;

QuadtreePacket_SparseQuadtreeNode* QuadtreePacket_SparseQuadtreeNode::New() const {
  return new QuadtreePacket_SparseQuadtreeNode;
}

void QuadtreePacket_SparseQuadtreeNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_node()) {
      if (node_ != NULL) node_->::keyhole::QuadtreeNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreePacket_SparseQuadtreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Node;
        break;
      }
      
      // required .keyhole.QuadtreeNode Node = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreePacket_SparseQuadtreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // required .keyhole.QuadtreeNode Node = 4;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreePacket_SparseQuadtreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // required .keyhole.QuadtreeNode Node = 4;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreePacket_SparseQuadtreeNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required .keyhole.QuadtreeNode Node = 4;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreePacket_SparseQuadtreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreePacket_SparseQuadtreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreePacket_SparseQuadtreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreePacket_SparseQuadtreeNode::MergeFrom(const QuadtreePacket_SparseQuadtreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_node()) {
      mutable_node()->::keyhole::QuadtreeNode::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreePacket_SparseQuadtreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreePacket_SparseQuadtreeNode::CopyFrom(const QuadtreePacket_SparseQuadtreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreePacket_SparseQuadtreeNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void QuadtreePacket_SparseQuadtreeNode::Swap(QuadtreePacket_SparseQuadtreeNode* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreePacket_SparseQuadtreeNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreePacket_SparseQuadtreeNode_descriptor_;
  metadata.reflection = QuadtreePacket_SparseQuadtreeNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QuadtreePacket::kPacketEpochFieldNumber;
const int QuadtreePacket::kSparsequadtreenodeFieldNumber;
#endif  // !_MSC_VER

QuadtreePacket::QuadtreePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuadtreePacket::InitAsDefaultInstance() {
}

QuadtreePacket::QuadtreePacket(const QuadtreePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuadtreePacket::SharedCtor() {
  _cached_size_ = 0;
  packet_epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuadtreePacket::~QuadtreePacket() {
  SharedDtor();
}

void QuadtreePacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuadtreePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadtreePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuadtreePacket_descriptor_;
}

const QuadtreePacket& QuadtreePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_quadtreeset_2eprotodevel();  return *default_instance_;
}

QuadtreePacket* QuadtreePacket::default_instance_ = NULL;

QuadtreePacket* QuadtreePacket::New() const {
  return new QuadtreePacket;
}

void QuadtreePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_epoch_ = 0;
  }
  sparsequadtreenode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuadtreePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 packet_epoch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_epoch_)));
          set_has_packet_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_sparsequadtreenode;
        break;
      }
      
      // repeated group SparseQuadtreeNode = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_sparsequadtreenode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, add_sparsequadtreenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_sparsequadtreenode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuadtreePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 packet_epoch = 1;
  if (has_packet_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_epoch(), output);
  }
  
  // repeated group SparseQuadtreeNode = 2 {
  for (int i = 0; i < this->sparsequadtreenode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->sparsequadtreenode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuadtreePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 packet_epoch = 1;
  if (has_packet_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_epoch(), target);
  }
  
  // repeated group SparseQuadtreeNode = 2 {
  for (int i = 0; i < this->sparsequadtreenode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->sparsequadtreenode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuadtreePacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 packet_epoch = 1;
    if (has_packet_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_epoch());
    }
    
  }
  // repeated group SparseQuadtreeNode = 2 {
  total_size += 2 * this->sparsequadtreenode_size();
  for (int i = 0; i < this->sparsequadtreenode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->sparsequadtreenode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadtreePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuadtreePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuadtreePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuadtreePacket::MergeFrom(const QuadtreePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  sparsequadtreenode_.MergeFrom(from.sparsequadtreenode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_epoch()) {
      set_packet_epoch(from.packet_epoch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuadtreePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadtreePacket::CopyFrom(const QuadtreePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadtreePacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < sparsequadtreenode_size(); i++) {
    if (!this->sparsequadtreenode(i).IsInitialized()) return false;
  }
  return true;
}

void QuadtreePacket::Swap(QuadtreePacket* other) {
  if (other != this) {
    std::swap(packet_epoch_, other->packet_epoch_);
    sparsequadtreenode_.Swap(&other->sparsequadtreenode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuadtreePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuadtreePacket_descriptor_;
  metadata.reflection = QuadtreePacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace keyhole

// @@protoc_insertion_point(global_scope)
